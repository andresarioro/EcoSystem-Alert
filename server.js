import express from 'express'
import http from 'node:http'
import { Server } from 'socket.io'
import { SerialPort } from 'serialport'
import { ReadlineParser } from '@serialport/parser-readline'
import { configPort, PORT } from './config.js'

// üñ•Ô∏è Inicializar Express y servidor HTTP
const app = express()
const server = http.createServer(app)
const io = new Server(server)

// üåê Servir archivos est√°ticos desde carpeta 'public'
app.use(express.static('public'))

// üõ†Ô∏è CONFIGURACI√ìN DEL PUERTO SERIAL (verifica COM y baudRate)
const port = new SerialPort(configPort)

// üì• Parseador de l√≠neas (por salto de l√≠nea)
const parser = port.pipe(new ReadlineParser({ delimiter: '\n' }))

// üîå Intentar abrir el puerto COM
port.open(err => {
  if (err) {
    return console.error(`‚ùå Error al abrir el puerto: ${err.message}`)
  }
  console.log(`‚úÖ Puerto ${port.path} abierto correctamente.`)
})

// üì§ Enviar datos recibidos al cliente v√≠a WebSocket
parser.on('data', data => {
  const result = data.trim()
  console.log('üì® Dato recibido:', result)
  io.emit('serial-data', result)
})

// üñ•Ô∏è Iniciar el servidor
server.listen(PORT, () => {
  console.log(`üöÄ Servidor corriendo en http://localhost:${PORT}`)
})

// üõë Manejo de errores del puerto
port.on('error', err => {
  console.error('‚ö†Ô∏è Error en el puerto:', err.message)
})
